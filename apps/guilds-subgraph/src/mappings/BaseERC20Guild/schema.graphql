type Proposal @entity {
  id: ID!
  creator: String!
  startTime: BigInt!
  endTime: BigInt!
  to: [String!]
  data: [String!]
  value: [BigInt!]
  title: String!
  contentHash: String!
  contractState: BigInt!
  guildId: Guild!
  totalVotes: [BigInt!]
  votes: [Vote!] @derivedFrom(field: "proposalId")
  options: [Option!] @derivedFrom(field: "proposalId")
  snapshotId: BigInt
  metadata: String
  description: String
  executionTransactionHash: String
  statesLog: [ProposalStateLog!] @derivedFrom(field: "proposalId")
}

type ProposalStateLog @entity {
  id: ID!
  proposalId: Proposal!
  state: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type Option @entity {
  id: ID!
  label: String
  proposalId: Proposal!
  actions: [Action!]
  voteAmount: BigInt
  votes: [Vote!] @derivedFrom(field: "optionId")
}

type Action @entity {
  id: ID!
  optionId: String!
  to: String!
  data: String!
  value: BigInt!
  from: String!
}

type Vote @entity {
  id: ID!
  proposalId: Proposal!
  option: BigInt!
  optionId: Option!
  optionLabel: String
  voter: String!
  votingPower: BigInt!
  transactionHash: String!
}

type Member @entity {
  id: ID!
  guildId: Guild!
  address: String!
  tokensLocked: BigInt!
}

